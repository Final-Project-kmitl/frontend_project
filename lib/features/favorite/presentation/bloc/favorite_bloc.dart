import 'package:bloc/bloc.dart';
import 'package:flutter/material.dart';
import 'package:meta/meta.dart';
import 'package:project/features/favorite/domain/entities/fav_product.dart';
import 'package:project/features/favorite/domain/repository/fav_repository.dart';
import 'package:project/features/favorite/domain/usecase/get_favorite.dart';
import 'package:project/features/favorite/domain/usecase/un_fav_favorite.dart';
import 'package:project/features/home/presentation/bloc/home_bloc.dart';

part 'favorite_event.dart';
part 'favorite_state.dart';

class FavoriteBloc extends Bloc<FavoriteEvent, FavoriteState> {
  final GetFavorite getFavorite;
  final UnFavFavorite unFavFavorite;
  final HomeBloc homeBloc;

  FavoriteBloc({
    required this.getFavorite,
    required this.unFavFavorite,
    required this.homeBloc,
  }) : super(FavoriteInitial()) {
    on<LoadFavoritesEvent>(_onLoadFavorites);
    on<ToggleFavoriteEvent>(_onToggleFavorite);
    on<SubmitUnfavoriteEvent>(_onSubmitUnfavorite);

    // ‡πÇ‡∏´‡∏•‡∏î Favorite ‡∏ï‡∏±‡πâ‡∏á‡πÅ‡∏ï‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°
    add(LoadFavoritesEvent());
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ Favorite
  Future<void> _onLoadFavorites(
      LoadFavoritesEvent event, Emitter<FavoriteState> emit) async {
    emit(FavoriteLoading());
    print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î Favorite...");
    try {
      final favorites = await getFavorite();
      emit(FavoriteLoaded(favorites: favorites, unfavList: {}));
      print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ${favorites.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£");
    } catch (e) {
      emit(FavoriteError(message: "Failed to load favorites"));
    }
  }

  // ‡∏Å‡∏î Unfav (‡πÅ‡∏Ñ‡πà‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏•‡∏ö‡∏à‡∏≤‡∏Å UI)
  void _onToggleFavorite(
      ToggleFavoriteEvent event, Emitter<FavoriteState> emit) {
    final currentState = state;
    if (currentState is FavoriteLoaded) {
      final newUnfavList = Set<int>.from(currentState.unfavList ?? {});

      if (newUnfavList.contains(event.productId)) {
        newUnfavList.remove(event.productId);
      } else {
        newUnfavList.add(event.productId);
      }

      emit(currentState.copyWith(unfavList: newUnfavList));
      print("‚≠ê Unfav List ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $newUnfavList");
    }
  }

  // ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ Favorite ‚Üí ‡∏™‡πà‡∏á API ‡πÑ‡∏õ‡∏¢‡∏±‡∏á backend
  Future<void> _onSubmitUnfavorite(
      SubmitUnfavoriteEvent event, Emitter<FavoriteState> emit) async {
    final currentState = state;

    print("üì¢ SubmitUnfavoriteEvent ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å");
    print("üìå State ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô: $currentState");

    if (currentState is! FavoriteLoaded) {
      print("‚ö†Ô∏è State ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏û‡∏£‡πâ‡∏≠‡∏° ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ unfavorite ‡πÑ‡∏î‡πâ");
      return;
    }

    final unfavList = currentState.unfavList ?? {};
    if (unfavList.isEmpty) {
      print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏à‡∏∞ unfavorite");
      return;
    }

    unfavList.forEach((e) {
      print(e);
      homeBloc.add(UpdateUIEvent(isFavorite: false, productId: e));
    });
    print("‚úÖ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á Unfavorite: $unfavList");
    try {
      await unFavFavorite(unfavList);
      emit(currentState.copyWith(unfavList: {}));
      print("‚úÖ ‡∏•‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ unfav ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à");
    } catch (e) {
      print("‚ùå ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: $e");
      emit(FavoriteError(message: "Failed to update favorites"));
    }
  }
}
